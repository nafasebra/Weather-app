{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","search","e","target","value","key","fetch","then","response","json","result","className","type","placeholder","onChange","onKeyPress","main","description","Math","round","temp","name","sys","country","myDate","day","getDay","month","getMonth","date","getDate","year","getFullYear","dateHandler","Date","style","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAGMA,EACC,mCADDA,EAEM,2CAwEGC,MArEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,IAArC,mBAAKG,EAAL,KAAcC,EAAd,KAEMC,EAAS,SAAAC,GACbJ,EAASI,EAAEC,OAAOC,OACL,UAAVF,EAAEG,MACHL,EAAW,IACXM,MAAM,GAAD,OAAIZ,EAAJ,qBAA6BG,EAA7B,kBAA4CH,IAC9Ca,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAYV,EAAWU,QAiBnC,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBACEC,KAAK,OACLC,YAAY,YACZC,SAAU,SAACZ,GAAD,OAAOD,EAAOC,IACxBE,MAAOP,EACPkB,WAAY,SAACb,GAAD,OAAOD,EAAOC,QAGJ,qBAAjBH,EAAQiB,KACf,sBAAKL,UAAU,eAAf,UACE,6BAAKZ,EAAQA,QAAQ,GAAGiB,OACxB,mBAAGL,UAAU,YAAb,SACGZ,EAAQA,QAAQ,GAAGkB,cAEtB,qBAAIN,UAAU,YAAd,UACGO,KAAKC,MAAMpB,EAAQiB,KAAKI,KAAO,IADlC,UAGA,oBAAGT,UAAU,YAAb,UAA0BZ,EAAQsB,KAAlC,KAA0CtB,EAAQuB,IAAIC,WACtD,mBAAGZ,UAAU,YAAb,SAlCU,SAAAa,GAChB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAOE,UAClBC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC5E,YAAa,UAAW,WAAY,YAInBH,EAAOI,YACtBC,EAAOL,EAAOM,UACdC,EAAOP,EAAOQ,cAElB,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAA0BE,EAA1B,YAAkCE,GAwBFE,CAAY,IAAIC,WAG5C,mBAAGC,MAAO,CAACC,UAAW,OAAtB,6CC/COC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f537e118.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css';\r\n\r\nconst api = {\r\n  key: \"aca9ec2a5fd98688c095263751e23330\",\r\n  baseLink: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n  let [query, setQuery] = useState('');\r\n  let [weather, setWeather] = useState({});\r\n\r\n  const search = e => {\r\n    setQuery(e.target.value);\r\n    if(e.key === \"Enter\"){\r\n      setWeather({});\r\n      fetch(`${api.baseLink}weather?q=${query}&appid=${api.key}`)\r\n        .then((response) => response.json())\r\n        .then((result) => setWeather(result))\r\n    }\r\n  }\r\n\r\n  let dateHandler = myDate => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\r\n      \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[myDate.getDay()];\r\n    let month = months[myDate.getMonth()];\r\n    let date = myDate.getDate();\r\n    let year = myDate.getFullYear();\r\n\r\n    return `${day} ${month} ${date} ${year}`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"search-box\">\r\n        <input \r\n          type=\"text\"\r\n          placeholder=\"search...\"\r\n          onChange={(e) => search(e)} \r\n          value={query}\r\n          onKeyPress={(e) => search(e)}\r\n          />\r\n      </div>\r\n      {(typeof weather.main !== \"undefined\") ? (\r\n        <div className=\"info-section\">\r\n          <h2>{weather.weather[0].main}</h2>\r\n          <p className=\"thin_text\">\r\n            {weather.weather[0].description}\r\n          </p>\r\n          <h4 className=\"temp_text\">\r\n            {Math.round(weather.main.temp / 10)}°\r\n          </h4>\r\n          <p className=\"thin_text\">{weather.name}, {weather.sys.country}</p>\r\n          <p className=\"thin_text\">{dateHandler(new Date())}</p>\r\n        </div>\r\n      ) : (\r\n        <p style={{marginTop: \"3em\"}}>Nothing for display data :)</p>\r\n      )}\r\n{/*       \r\n      <div className=\"info-section\">\r\n        <p className=\"thin_text\">{dateHandler(new Date())}</p>\r\n        <p className=\"thin_text\">Tehran, Iran</p>\r\n        <h4 className=\"temp_text\">\r\n          20°\r\n        </h4>\r\n        <h2 className=\"big_text\">Suuny</h2>\r\n        <p className=\"thin_text\">\r\n          very sunny\r\n        </p>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}